\echo regexp_match()

\echo SQL standard Identity columns

CREATE TABLE itest (
a int GENERATED BY DEFAULT AS IDENTITY,
b int GENERATED ALWAYS AS IDENTITY
)
;

\echo file_fdw can now use program

CREATE FOREIGN TABLE
test(a int, b text)
SERVER csv
OPTIONS (program 'gunzip -c /tmp/data.csv.gz');

\echo xmltable

\echo jsonb  fts

SELECT to_tsvector('{"foo": "bar", "baz": 3}');
SELECT to_tsvector('{"foo": "bar", "baz": 3}'::jsonb);
SELECT ts_headline('{"foo": "bar", "baz": 3}','foo');
SELECT ts_headline('{"foo": "bar", "baz": 3}'::jsonb,'foo');

SELECT * FROM t ORDER BY a COLLATE "sv-SE-x-icu";


\echo logical replication

-- publisher
CREATE TABLE testtable (a int PRIMARY KEY, b text);
CREATE PUBLICATION testpub FOR TABLE testtable;

-- subscriber

CREATE TABLE testtable (a int PRIMARY KEY, b text);
CREATE SUBSCRIPTION testsub
CONNECTION 'host=/tmp port=5500 dbname=postgres user=mha'
PUBLICATION testpub;

\echo  Partitioning by range

CREATE TABLE testlog 
(
 t timestamptz DEFAULT now(), 
 txt text
) PARTITION BY RANGE(t);

CREATE TABLE testlog_2017 PARTITION OF testlog (t)
FOR VALUES FROM ('2017-01-01') TO ('2018-01-01');

INSERT INTO testlog (txt) VALUES ('test');

\echo Partitioning by list

CREATE TABLE testcat (category text, txt text)
PARTITION BY LIST(category);

CREATE TABLE testcat_cat13
PARTITION OF testcat (category)
FOR VALUES IN ('cat1','cat2','cat3');

INSERT INTO testcat VALUES ('cat1','Test1');

SELECT * FROM generate_series(1, 10) AS f(x);

SELECT x, SUM(x) OVER ()
FROM generate_series(1, 10) AS f(x);

SELECT x, COUNT(x) OVER (), SUM(x) OVER ()
FROM generate_series(1, 10) AS f(x);


SELECT x, COUNT(x) OVER w, SUM(x) OVER w
FROM generate_series(1, 10) AS f(x)
WINDOW w AS ();

SELECT x, COUNT(x) OVER w, SUM(x) OVER w
FROM generate_series(1, 10) AS f(x)
WINDOW w AS (RANGE BETWEEN  UNBOUNDED PRECEDING AND CURRENT ROW);
